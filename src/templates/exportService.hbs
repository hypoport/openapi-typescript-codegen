import { AxiosResponse } from 'axios';

{{#each imports}}
{{#if (isEqual this 'CreateAuthTokenRequestModel')}}
{{else}}
import { {{{this}}} } from '../../../models';
{{/if}}
{{/each}}
import { HttpClient } from '../../http/http-client';

export type {{{name}}}{{{@root.postfix}}} = ReturnType<typeof {{{lowerCase name}}}{{{@root.postfix}}}Factory>;
export type {{{name}}}{{{@root.postfix}}}Options = {
  baseUrl: string;
  httpClient: HttpClient;
};

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export const {{{lowerCase name}}}{{{@root.postfix}}}Factory = ({ baseUrl, httpClient }: {{{name}}}{{{@root.postfix}}}Options) => ({
	{{#each operations}}
    {{#if (isEqual name 'getStatus')}} 
      {{{name}}}: async (timeout?: number): Promise<AxiosResponse<{{>result}}>> => {
      const url = `${baseUrl}{{{escapePath path}}}`;
      return httpClient.{{{lowerCase method}}}(url, undefined, timeout);
		  },
    {{else if (isEqual name 'createAuthToken')}}
      {{{name}}}: async ({clientId, clientSecret, scopes, actor, subject, email, timeout}:{clientId: string, clientSecret: string, scopes: string, actor?: string, subject?: string, email?: string, timeout?: number}): Promise<AxiosResponse<{{>result}}>> => {
      const url = `${baseUrl}{{{escapePath path}}}`;

      const params = new URLSearchParams();
      params.append('client_id', clientId);
      params.append('client_secret', clientSecret);
      params.append('scope', scopes);
      params.append('grant_type', 'client_credentials');

      if (actor) {
        params.append('actor', actor);
      }
      if (subject) {
        params.append('subject', subject);
      }
      if (email) {
        params.append('email', email);
      }
      
      return httpClient.{{{lowerCase method}}}(url, params, undefined, timeout, 'application/x-www-form-urlencoded');
      },
    {{else}}
      {{{name}}}: async ({ {{>accessToken}}{{>deconstruction}}timeout}:{ {{>accessTokenParam}}{{>parameters}}timeout?: number}): Promise<AxiosResponse<{{>result}}>> => {
      let url = `${baseUrl}{{{escapePath path}}}`;
      {{#if parametersQuery}}

      const urlWithParams = new URL(url);

      {{#each parametersQuery}}
      if ({{{name}}}) {
        urlWithParams.searchParams.append('{{{name}}}', `${ {{{name}}} }`);
      }
      {{/each}}
      url = urlWithParams.href
			{{/if}}
      {{#if (isEqual method 'GET')}} 
        return httpClient.{{{lowerCase method}}}(url, {{>accessTokenOrUndefined}} timeout);
      {{else if (isEqual method 'DELETE')}}
        return httpClient.{{{lowerCase method}}}(url, {{>accessTokenOrUndefined}} timeout);
      {{else}}
        return httpClient.{{{lowerCase method}}}(url, {{>requestBodyOrUndefined}} {{>accessTokenOrUndefined}} timeout);
      {{/if}}
      },
    {{/if}}
	{{/each}}
});
